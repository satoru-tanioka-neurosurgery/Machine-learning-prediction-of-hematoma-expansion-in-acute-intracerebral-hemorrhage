import numpy as np
from imblearn.over_sampling import RandomOverSampler
import xgboost as xgb
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import roc_curve
from sklearn.metrics import roc_auc_score
import matplotlib.pyplot as plt

data_train=np.loadtxt('file_name_train.csv',delimiter=',',skiprows=1,dtype=float)
x_train=data_train[:, 1:]
y_train=data_train[:, 0:1].ravel()


data_test=np.loadtxt('file_name_test.csv',delimiter=',',skiprows=1,dtype=float)
x_test=data_test[:, 1:]
y_test=data_test[:, 0:1].ravel()

ros=RandomOverSampler(random_state='fixed_value')
x_train,y_train=ros.fit_sample(x_train,y_train)

params={
        'booster': 'gbtree',
        'objective': 'binary:logistic',
        'eta': 'value',
        'max_depth': 'value',
        'min_child_weight': 'value',
        'colsample_bytree': 'value',
        'subsample': 'value',
        'gamma': 'value',
        'alpha': 'value',
        'random_state': 'fixed_value',
    }

num_round='value'

dtrain=xgb.DMatrix(x_train,label=y_train)
dtest=xgb.DMatrix(x_test,label=y_test)
model=xgb.train(params,dtrain,num_round)

predict_proba_test=model.predict(dtest)
predict_test=np.where(predict_proba_test>0.5,1,0)
score_test=accuracy_score(y_test,predict_test)
print('score_test:{:.3f}'.format(score_test))
confusion_test=confusion_matrix(y_test,predict_test)
print("{}".format(confusion_test))
tn,fp,fn,tp=confusion_matrix(y_test,predict_test).ravel()
sensitivity_test=tp/(tp+fn)
print("sensitivity_test:{:.3f}".format(sensitivity_test))
specificity_test=tn/(tn+fp)
print("specificity_test:{:.3f}".format(specificity_test))

fpr,tpr,thresholds=roc_curve(y_test,predict_test)
auc_test=roc_auc_score(y_test,predict_test)
print('AUC_test: {:.3f}'.format(auc_test)) 
plt.plot(fpr, tpr, label='ROC curve (area = %.2f)'%auc_test)
plt.legend()
plt.title('ROC curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.grid(True)
